create table MARY.STUDENTS(ID number, NAME varchar2(20), GROUP_ID number);

create table MARY.GROUPS(ID number, NAME varchar2(20), C_VAL number);


--TASK2
CREATE OR REPLACE TRIGGER MARY.unique_id_students
    before
    insert
    ON mary.STUDENTS
    FOR EACH ROW
DECLARE
    similar_id_num int;
    PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    select count(*) into similar_id_num from mary.STUDENTS where ID = :new.ID;
    if similar_id_num > 0 then
        raise_application_error (-20999,'New id not allowed');
    end if;
END ;

CREATE OR REPLACE TRIGGER MARY.unique_id_groups
    before
    insert
    ON mary.GROUPS
    FOR EACH ROW
DECLARE
similar_id_num int;
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    select count(*) into similar_id_num from mary.GROUPS where ID = :new.ID;
    if similar_id_num > 0 then
        raise_application_error (-20999,'New id not allowed');
    end if;
END ;

CREATE OR REPLACE TRIGGER MARY.unique_name_groups
    before
    insert
    ON mary.GROUPS
    FOR EACH ROW
DECLARE
similar_name_num int;
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    select count(*) into similar_name_num from mary.GROUPS where NAME = :new.NAME;
    if similar_name_num > 0 then
        raise_application_error (-20999,'New name not allowed');
    end if;
END;






create sequence seq_students
start with 1
increment by 1
nomaxvalue;


CREATE OR REPLACE TRIGGER autoincr_students
BEFORE INSERT
ON STUDENTS
FOR EACH ROW
BEGIN
    if :new.ID is null then
        SELECT seq_students.NEXTVAL INTO :new.ID FROM dual;
    end if;
END;

create sequence seq_groups
start with 1
increment by 1
nomaxvalue;


create or replace trigger autoincr_groups
before insert
on GROUPS
for each row
begin
    if :new.ID is null then
        select seq_groups.nextval into :new.ID from dual;
    end if;
end;

delete from GROUPS where ID = 22;
insert into groups(name, C_VAL) values('second', 30);
insert into groups(name, C_VAL) values('first', 30);
insert into groups(name, C_VAL) values('third', 30);
insert into groups(id, name, C_VAL) values(22,'third2', 30);

select * from groups;
select * from STUDENTS;
insert into groups(name, C_VAL) values('first2', 30);
insert into groups(id,name, C_VAL) values(22,'ss', 30);
insert into students(name, GROUP_ID) values('mary22', 22);
delete from groups;
drop table groups;

-- delete from GROUPS;
--drop trigger autoincr_groups;

--TASK3
create or replace trigger cascade_delete
    before delete on GROUPS
    for each row
begin
    delete from STUDENTS where group_id = :old.ID;
end;

select * from STUDENTS;
select * from GROUPS;

delete from GROUPS where id = 22;



--TASK4
create table logger (
    act_id number generated by default as identity primary key,
    username varchar2(50) not null,
    act_date date not null,
    action varchar2(10) not null,
    student_id number not null,
    student_name varchar2(50) not null,
    group_id number not null
);


create or replace trigger insert_logger_info
    after insert or update or delete on STUDENTS
    for each row
declare
    curr_date date := SYSDATE;
    curr_username varchar2(50) := USER;
    curr_action varchar2(50);
begin
    if inserting then
        curr_action := 'INSERT';
        insert into logger (username, act_date, action, student_id, student_name, group_id)
        values (curr_username, curr_date, curr_action, :new.id, :new.name, :new.group_id);
    elsif updating then
        curr_action := 'UPDATE';
        insert into logger (username, act_date, action, student_id, student_name, group_id)
        values (curr_username, curr_date, curr_action, :new.id, :new.name, :new.group_id);
    elsif deleting then
        curr_action := 'DELETE';
        insert into logger (username, act_date, action, student_id, student_name, group_id)
        values (curr_username, curr_date, curr_action, :old.id, :old.name, :old.group_id);
    end if;

end;

insert into STUDENTS(name, group_id) values('masha', 22);
insert into STUDENTS(name, group_id) values('anton', 22);
insert into STUDENTS(name, group_id) values('maks', 22);

select * from groups;


--drop table logger;


--TASK5
-- ALTER TRIGGER autoincr_students DISABLE;
-- ALTER TRIGGER unique_id_students DISABLE;
-- ALTER TRIGGER insert_logger_info DISABLE;
-- ALTER TRIGGER autoincr_groups DISABLE;
-- ALTER TRIGGER unique_id_groups DISABLE;

CREATE OR REPLACE PROCEDURE restore_info(inp_date IN DATE)
    IS
    CURSOR get_history(input_date logger.act_date%TYPE) IS
    SELECT * FROM logger
    WHERE act_date >= input_date
    ORDER BY act_id DESC;
BEGIN
    FOR hist in get_history(inp_date) LOOP
        IF(hist.action = 'INSERT') THEN
            DELETE FROM STUDENTS WHERE id = hist.student_id;
        END IF;

        IF(hist.action = 'UPDATE') THEN
            UPDATE STUDENTS SET ID = hist.student_id, NAME = hist.student_name, GROUP_ID = hist.group_id
            WHERE ID = hist.student_id;
        END IF;

        IF(hist.action = 'DELETE') THEN
            INSERT INTO STUDENTS(ID, NAME, GROUP_ID)
            VALUES(hist.student_id, hist.student_name, hist.group_id);
        END IF;
    END LOOP;

DELETE FROM logger WHERE logger.act_date >= inp_date;
END;

    select * from logger;


CREATE OR REPLACE PROCEDURE restore_info_period(input_period IN INTERVAL DAY TO SECOND)
IS
BEGIN
    restore_info(SYSDATE - input_period);
END;


call restore_info(TO_DATE('10-03-2023 18:13:00', 'DD-MM-YYYY HH24:MI:SS'));

call restore_info_period(INTERVAL '0 0:30:2' DAY TO SECOND);

select * from logger;
select * from STUDENTS;
select * from GROUPS;
delete from GROUPS;
drop table logger;



insert into groups(id,name, C_VAL) values(22,'ss', 30);


delete from groups where id = 22;
insert

ALTER TRIGGER autoincr_students ENABLE;
ALTER TRIGGER unique_id_students ENABLE;
ALTER TRIGGER insert_logger_info ENABLE;
ALTER TRIGGER autoincr_groups ENABLE;
ALTER TRIGGER unique_id_groups ENABLE;


--TASK6
create or replace trigger del_update_group_c_val
after delete
on STUDENTS
for each row
declare
begin
        update groups set C_VAL = C_VAL - 1 where ID = :old.GROUP_ID;

exception
    when others then
      dbms_output.put_line('Error in tr_group_c_val_students_delete: ' || sqlerrm);end;

create or replace trigger ins_update_group_c_val
before insert
on STUDENTS
for each row
declare

begin
        update groups set C_VAL = C_VAL + 1 where ID = :new.GROUP_ID;

end;


create or replace trigger upd_update_group_c_val
before update
on STUDENTS
for each row
declare
begin
               update groups set C_VAL = C_VAL - 1 where ID = :old.GROUP_ID;
            update groups set C_VAL = C_VAL + 1 where ID = :new.GROUP_ID;

end;

select * from STUDENTS;
delete from mary.students;
insert into STUDENTS(name, group_id) values('mary4', 24);
insert into GROUPS(id, name, C_VAL) values(24, 'sss4', 3);
select * from GROUPS;
delete from GROUPS where id = 24;
select * from STUDENTS;
delete from STUDENTS where NAME='maks';
update students set GROUP_ID = 23 where id = 22;
select * from logger;

select * from logger;

call restore_info(TO_DATE('10-03-2023 18:51:31', 'DD-MM-YYYY HH24:MI:SS'));

call restore_info_period(INTERVAL '0 0:30:2' DAY TO SECOND);

select * from logger;
select * from STUDENTS;
select * from GROUPS;
delete from GROUPS;
-- drop table logger;
alter table students enable all triggers;

alter table students disable all triggers;

